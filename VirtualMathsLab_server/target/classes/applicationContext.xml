<?xml version="1.0" encoding="UTF-8"?>


<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:p="http://www.springframework.org/schema/p"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:mvc="http://www.springframework.org/schema/mvc" xmlns:task="http://www.springframework.org/schema/task"
	xsi:schemaLocation="
	http://www.springframework.org/schema/beans
	http://www.springframework.org/schema/beans/spring-beans-3.1.xsd 
	http://www.springframework.org/schema/context
	http://www.springframework.org/schema/context/spring-context-3.1.xsd
	http://www.springframework.org/schema/mvc
	http://www.springframework.org/schema/mvc/spring-mvc-3.1.xsd
	http://www.springframework.org/schema/task
	http://www.springframework.org/schema/task/spring-task-3.1.xsd">

	<!-- Activates various annotations to be detected in bean classes -->
	<context:annotation-config />

	<!-- Scans the classpath for annotated components that will be auto-registered 
		as Spring beans. For example @Controller and @Service. Make sure to set the 
		correct base-package, We can use commas between different base package -->

	<context:component-scan base-package="in.ac.coep" />

	<!-- Load values of Properties to be replaced with -->
	<context:property-placeholder
		location="classpath:database.properties, classpath:mail.properties" />

	<!-- Configures the annotation-driven Spring MVC Controller programming 
		model. Note that, with Spring 3.0, this tag works in Servlet MVC only! -->
	<!-- <mvc:annotation-driven validator="validator" /> -->
	<mvc:annotation-driven />

	<!-- Activates @Scheduled and @Async annotations for scheduling -->
	<task:annotation-driven executor="executorWithPoolSizeRange"
		scheduler="taskScheduler" />

	<!-- The 'executor' element: When a task is submitted, the executor will 
		first try to use a free thread if the number of active threads is currently 
		less than the core size. If the core size has been reached, then the task 
		will be added to the queue as long as its capacity has not yet been reached. 
		Only then, if the queue's capacity has been reached, will the executor create 
		a new thread beyond the core size. If the max size has also been reached, 
		then the executor will reject the task See: 25.4.2 The 'executor' element -->
	<!-- Defines a ThreadPoolTaskExecutor instance with configurable pool size, 
		queue-capacity, keep-alive, and rejection-policy values. The id becomes the 
		default thread name prefix -->
	<task:executor id="executorWithPoolSizeRange" pool-size="5-25"
		queue-capacity="100" />

	<!-- Defines a ThreadPoolTaskScheduler instance with configurable pool size. 
		The id becomes the default thread name prefix. -->
	<task:scheduler id="taskScheduler" pool-size="1" />


	<!-- Using BCrypt for password encoding -->
	<!-- <bean id="encoder" -->
	<!-- class="org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder" 
		/> -->
	<!-- Use a Md5 encoder since the user's passwords are stored as Md5 in the 
		database -->
	<bean
		class="org.springframework.security.authentication.encoding.Md5PasswordEncoder"
		id="passwordEncoder" />


	<bean id="jacksonMessageConverter"
		class="org.springframework.http.converter.json.MappingJacksonHttpMessageConverter" />
	<bean
		class="org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter">
		<property name="messageConverters">
			<list>
				<ref bean="jacksonMessageConverter" />
			</list>
		</property>
	</bean>

	<bean id="messageSource"
		class="org.springframework.context.support.ResourceBundleMessageSource">
		<property name="basenames">
			<list>
				<value>messages</value>
			</list>
		</property>
	</bean>




	<bean id="JacksonObjectMapper" class="org.codehaus.jackson.map.ObjectMapper" />

</beans>